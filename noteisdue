#!/usr/bin/perl -w

use strict;

package Notes::Comment;
	use strict;
        use feature 'signatures';
        no warnings 'experimental::signatures';


	sub new($class, $update) {
		my $self=$update;
		bless($self, $class);
		return $self;
	}
	
	sub date($self) {
		return $self->{date};
	}

	sub user($self) {
		return $self->{user};
	}

	sub text($self) {
		return $self->{text};
	}

1;

package Notes::Noteupdate;
        use strict;
        use feature 'signatures';
        no warnings 'experimental::signatures';

	sub new($class, $update) {
		my $self=$update;
		bless($self, $class);
		return $self;
	}

	sub id($self) {
		return $self->{properties}{id};
	}

	sub comments($self) {

		return map { new Notes::Comment($_) } @{$self->{properties}{comments}};
	}
1;

package Notes::API;
	use strict;
	use LWP::UserAgent;
	use LWP::Authen::OAuth2;
	use URI::Encode qw/uri_encode/;
	use Data::Dumper;
	use HTTP::Request::Common;
	use File::Slurp qw/read_file write_file/;
	use List::Util qw/any/;
	use FindBin qw/$Bin/;
	use JSON;
	use feature 'signatures';
	no warnings 'experimental::signatures';

	sub new($class, $api) {
		my $self = {
			uri => $api->{uri},
			limit => $api->{limit} // 100
		};

		bless($self, $class);

		$self->oauth2_refresh_token($api);

		return $self;
	}

	sub oauth2_token_read($self) {
		my $tokens=read_file("$Bin/.oauth2_tokens", err_mode => "quiet");
		return $tokens // undef;
	}

	# Check if token authenticates against api and returns the right permissions
	sub oauth2_token_valid($self, $api) {
		my $r=$self->{oauth2}->get($api->{auth}{permissionuri});

		return 0 if (!$r->is_success());

		my $p=from_json($r->decoded_content());

		return 0 if (!defined($p->{permissions}));

		return 1 if (any { $_ =~ /write_notes/; } @{$p->{permissions}});

		return 0;
	}


	sub oauth2_refresh_token($self, $api) {

		my $tokens=$self->oauth2_token_read();

		my $oauth2 = LWP::Authen::OAuth2->new(
			client_id => $api->{auth}{clientid},
			client_secret => $api->{auth}{clientsecret},
			authorization_endpoint => $api->{auth}{authorizationuri},
			token_endpoint => $api->{auth}{tokenuri},
			redirect_uri => "https://localhost/noteisdue/authenticated",

			# Optional hook, but recommended.
			save_tokens => \&oauth2_save_tokens,
			save_tokens_args => [ $self ],
			scope => $api->{auth}{scope},

			# This is for when you have tokens from last time.
			token_string => $tokens
		);

		$self->{oauth2}=$oauth2;

		if (defined($tokens)) {
			if ($self->oauth2_token_valid($api)) {
				printf("Token authentication is valid\n");
				return;
			}
			return;
		}

		my $istty = -t STDIN && (-t STDOUT || !(-f STDOUT || -c STDOUT)) ;

		if (!$istty) {
			die("Cant refresh token noninteractively - please run in terminal");
		}

		# Interactively create token with user
		printf("Authenticate at: %s\n", $oauth2->authorization_url());
		printf("Enter url you got redirected to: ");
		my $code=<STDIN>;
		chomp($code);
		$code=~s/^.*code=//;

		$oauth2->request_tokens(code => $code);	

		if (defined($oauth2->token_string)) {
			printf("Got token: %s\n", $oauth2->token_string);
		}
	}

	# Callback - reverted self/tokens
	sub oauth2_save_tokens($tokens, $self) {
		write_file("$Bin/.oauth2_tokens", $tokens);
	}

	sub fetch($self, $left, $bottom, $right, $top) {
		my $area=($top-$bottom)*($right-$left);

		printf("Fetching notes in bbox %f, %f, %f, %f area %f\n", $left, $bottom, $right, $top, $area);

		# If the area is to large split it down
		if ($area > 25) {
			my $xmid=$left+($right-$left)/2;
			my $ymid=$bottom+($top-$bottom)/2;

			my @notes;

			push @notes, @{$self->fetch($left, $ymid, $xmid, $top)};
			push @notes, @{$self->fetch($xmid, $ymid, $right, $top)};
			push @notes, @{$self->fetch($left, $bottom, $xmid, $ymid)};
			push @notes, @{$self->fetch($xmid, $bottom, $right, $ymid)};

			return \@notes;
		}

		my $uri=sprintf("%s/notes/?bbox=%f,%f,%f,%f&format=json&limit=%d",
			$self->{uri}, $left, $bottom, $right, ${top}, $self->{limit});

		my $response=$self->{oauth2}->get($uri);

		if (!$response->is_success()) {
			return undef;
		}

		my $data=from_json($response->decoded_content);

		my @updates=map { new Notes::Noteupdate($_) } @{$data->{features}};

		printf("Fetched %d notes in bbox %f, %f, %f, %f area %f\n", scalar @updates, $left, $bottom, $right, $top, $area);

		return \@updates;
	}

	use URI::Encode;

	sub note_close($self, $noteid, $comment) {
		my $uri=sprintf("%s/notes/%d/close?text=%s",
			$self->{uri}, $noteid, uri_encode($comment));

		my $response=$self->{oauth2}->post($uri);

		if (!$response->is_success()) {
			return undef;
		}

		return $response->decoded_content();
	}

	sub note_reopen($self, $noteid) {
		my $uri=sprintf("%s/notes/%d/reopen",
			$self->{uri}, $noteid);

		my $response=$self->{oauth2}->post($uri);

		if (!$response->is_success()) {
			return undef;
		}

		return $response->decoded_content();
	}

	sub note_comment($self, $noteid, $comment) {
		my $uri=sprintf("%s/notes/%d/comment?text=%s",
			$self->{uri}, $noteid, uri_encode($comment));

		my $response=$self->{oauth2}->post($uri);

		if (!$response->is_success()) {
			return undef;
		}

		return $response->decoded_content();
	}
1;

package Notes::Database::Note;
   	use strict;
        use feature 'signatures';
        no warnings 'experimental::signatures';

	sub new($class, $dbh, $row) {

		my $self={
			row=>$row,
			dbh=>$dbh
		};
		bless($self, $class);

		return $self;
	}

	sub id($self) {
		return $self->{row}{noteid};
	}

	sub action($self) {
		return $self->{row}{action};
	}

	sub username($self) {
		return $self->{row}{username};
	}

	sub done($self) {
		my $sql=$self->{dbh}->prepare("update notes set reopened = true where id = ?");
		$sql->execute($self->{row}{id});
		$sql->finish();
	}
1;

package Notes::Database;

   	use strict;
        use LWP::UserAgent;
        use JSON;
        use feature 'signatures';
        no warnings 'experimental::signatures';

	sub new($class, $dbconfig) {
		my $self=$dbconfig;
		bless($self, $class);

		$self->connect();

		return $self;
	}

	sub connect($self) {

		my $dbh = DBI->connect($self->{host}, $self->{username}, $self->{password}) or die $DBI::errstr;
		$dbh->{pg_enable_utf8} = 1;

		$self->{dbh}=$dbh;
	}

	sub noteexists($self, $noteid, $commenttimestamp) {
		my $sql=$self->{dbh}->prepare("select id from notes where noteid = ? and commenttimestamp = to_timestamp(?)") || die $DBI::errstr;
		$sql->execute($noteid, $commenttimestamp);
		my $row=$sql->fetchrow();
		$sql->finish();

		return defined($row);
	}

	sub addnotereopen($self, $noteid, $reopentimestamp, $commenttimestamp, $user) {
		if (noteexists($self, $noteid, $commenttimestamp)) {
			printf("%20s Already in database\n", $noteid);
			return 0;	
		}

		my $sql=$self->{dbh}->prepare("insert into notes ( noteid, due, commenttimestamp, action, username) values ( ?, to_timestamp(?), to_timestamp(?), 'reopen', ? )") || die $DBI::errstr;
		my $err=$sql->execute($noteid, $reopentimestamp, $commenttimestamp, $user);
		$sql->finish();

		return $err // 0;
	}

	sub addnotenotify($self, $noteid, $reopentimestamp, $commenttimestamp, $user) {
		if (noteexists($self, $noteid, $commenttimestamp)) {
			printf("%20s Already in database\n", $noteid);
			return 0;	
		}

		my $sql=$self->{dbh}->prepare("insert into notes ( noteid, due, commenttimestamp, action, username) values ( ?, to_timestamp(?), to_timestamp(?), 'notify', ? )") || die $DBI::errstr;
		my $err=$sql->execute($noteid, $reopentimestamp, $commenttimestamp, $user);
		$sql->finish();

		return $err // 0;
	}

	sub duenotes($self) {
		my $sql=$self->{dbh}->prepare("select id, noteid, due, action, username from notes where reopened = false and due < 'now'::timestamp") || die $DBI::errstr;
		my $err=$sql->execute();

		my @notes;
		while(my $row=$sql->fetchrow_hashref()) {
			push @notes, new Notes::Database::Note($self->{dbh}, $row);
		}

		$sql->finish();

		return \@notes;
	}


1;

use strict;
use feature 'signatures';
use Data::Dumper;
use Getopt::Long::Descriptive;
use File::Slurp;
use List::Util;
use Date::Manip qw/ParseDate/;
use FindBin qw/$Bin/;
use DBI;

sub updatefromapi($config, $a, $d) {
	my $updates=$a->fetch(
		$config->{bbox}{left},
		$config->{bbox}{bottom},
		$config->{bbox}{right},
		$config->{bbox}{top});

	foreach my $update ( @{$updates} ) {
		foreach my $comment ( $update->comments() ) {

			my $user=$comment->user();
			next if (!defined($user) || $user eq '');

			# Allowed user list?
			if (!scalar grep { $user eq $_ } @{$config->{users}}) {
				next;
			}

			my $text=$comment->text();
			next if (!defined($text));

			my @lines=split(/\n/, $text);

			# No comments - nothing to process
			next if (scalar @lines == 0);

			if ($lines[0] =~ /reopen:\s*(.+)$/) {
				my $datestring=$1;
				my $dm=new Date::Manip::Date;
				my $err=$dm->parse($1);

				next if ($err);

				my $reopentimestamp=$dm->secs_since_1970_GMT();

				$err=$dm->parse($comment->date());
				my $commenttimestamp=$dm->secs_since_1970_GMT();

				printf("%20s found reopen %s %s\n", $update->id(), $datestring, $comment->date());

				if ($d->addnotereopen($update->id(), $reopentimestamp, $commenttimestamp, $user)) {
					$a->note_close($update->id(), "Will be reopened");
				}
			} elsif ($lines[0] =~ /notify:\s*(.+)$/) {
				my $datestring=$1;
				my $dm=new Date::Manip::Date;
				my $err=$dm->parse($1);

				next if ($err);

				my $reopentimestamp=$dm->secs_since_1970_GMT();

				$err=$dm->parse($comment->date());
				my $commenttimestamp=$dm->secs_since_1970_GMT();

				printf("%20s found notify %s %s\n", $update->id(), $datestring, $comment->date());

				$d->addnotenotify($update->id(), $reopentimestamp, $commenttimestamp, $user);
			}
		}
	}
}

sub actionifdue($config, $a, $d) {
	my $notes=$d->duenotes();

	foreach my $note ( @{$notes} ) {
		if ($note->action() eq 'reopen') {
			printf("%20s Reopening\n", $note->id());
			$a->note_reopen($note->id());
			$note->done();
		} elsif ($note->action() eq 'notify') {
			printf("%20s notify\n", $note->id());
			$a->note_comment($note->id(), sprintf("User %s requested a notification", $note->username()));
			$note->done();
		}
	}
}

my ($opt, $usage) = describe_options(
	'$Bin %o <some-arg>',
	[ 'configfile=s',	"Config filename", { default => "noteisdueconfig.json" } ],
	[],
	[ 'help',               "print usage message and exit", { shortcircuit => 1 } ],
);

my $config=from_json(read_file($opt->configfile));

my $a=new Notes::API($config->{api});
my $d=new Notes::Database($config->{dbconfig});

updatefromapi($config, $a, $d);
actionifdue($config, $a, $d);

